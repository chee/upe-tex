
        /* cp:  minimal version */
        #include <stdio.h>
        #define PERMS 0644 /* RW for owner, R for group, others */
        char *progname;

        main(argc, argv)    /* cp: copy f1 to f2 */
            int argc;
            char *argv[];
        {
            int f1, f2, n;
            char buf[BUFSIZ];

            progname = argv[0];
            if (argc != 3)
                error("Usage: %s from to", progname);
            if ((f1 = open(argv[1], 0)) == -1)
                error("can't open %s", argv[1]);
            if ((f2 = creat(argv[2], PERMS)) == -1)
                error("can't create %s", argv[2]);

            while ((n = read(f1, buf, BUFSIZ)) > 0)
                if (write(f2, buf, n) != n)
                    error("write error", (char *) 0);
            exit(0);
        }

We will discuss error in the next sub-section.

There is a limit (typically about 20; look for NOFILE in <sys/param.h>) on the
number of files that a program may have open simultaneously. Accordingly, any
program that intends to process many files must be prepared to reuse file
descriptors. The system call close breaks the connection between a filename and
a file descriptor, freeing the file descriptor for use with some other file. The
termination of a program via exit or return from the main program closes all
open files.

The system call unlink removes a file from the file system.


Error processing --- errno

The system calls discussed in this section, and in fact all system calls, can
incur errors. Usually they indicate an error by returning a value of
-1. Sometimes it is nice to know what specific error occurred; for this purpose
all system calls, when appropriate, leave an error number in an external integer
called errno. (The meanings of the various error numbers are listed in the
introduction to Section 2 of the UNIX Programmer's Manual.) By using errono,
your program can, for example, determine whether an attempt to open a file
failed because it did not exist or because you lacked permission to read
it. There is also an array of character strings sys_errlist indexed by errno
that translates the numbers into a meaningful string. Our version of error uses


