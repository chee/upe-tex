
these data structures:

        error(s1, s2)   /* print error message and die */
            char *s1, *s2;
        {
            extern int errno, sys_nerr;
            extern char *sys_errlist[], *progname;

            if (progname)
                fprintf(stderr, "%s: ", progname);
            fprintf(stderr, s1, s2);
            if (errno > 0 && errno < sys_nerr)
                fprintf(stderr, " (%s)", sys_errlist[errno]);
            fprintf(stderr, "\n");
            exit(1);
        }

errno is initially zero, and should always be less than sys_nerr. It is not
reset to zero when things go well, however, so you must reset it after each
error if your program intends to continue.

Here is how error messages appear with this version of cp:

        $ cp foo bar
        cp: can't open foo (No such file or directory)
        $ date >foo; chmod 0 foo           Make an unreadable file
        $ cp too bar
        cp: can't open foo (Permission denied)
        $


Random access --- lseek

File I/O is normally sequential: each read or write takes place in the file
right after the previous one. When necessary, however, a file can be read or
written in an arbitrary order. The system call lseek provides a way to move
around in a file without actually reading or writing:

        int fd, origin;
        long offset, pos, lseek();

        pos = lseek(fd, offset, origin);

forces the current position in the file whose descriptor is fd to move to
position offset, which is taken relative to the location specified by
origin. Subsequent reading or writing will begin at that position. origin can be
0, 1, or 2 to specify that offset is to be measured from the beginning, from the
current position, or from the end of the file. The value returned is the new
absolute position, or -1 for an error. For example, to append to a file, seek to
the end before writing:

        lseek(fd, 0L, 2);

