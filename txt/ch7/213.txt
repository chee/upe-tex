
        /* p:  print input in chunks (version 4) */

        #include <stdio.h>
        #define PAGESIZE    22
        char    *progname;  /* program name for error message */

        main(argc, argv)
            int argc;
            char *argv[];
        {
            FILE *fp, *efopen();
            int i, pagesize = PAGESIZE;
            char *p, *getenv(), buf[BUFSIZ];

            progname = argv[0];
            if ((p=getenv("PAGESIZE")) != NULL)
                pagesize = atoi(p);
            if (argc > 1 && argv[1][0] == '-') {
                pagesize = atoi(&argv[1][1]);
                argc--;
                argv++;
            }
            if (argc == 1)
                print(stdin, pagesize);
            else
                for (i = 1; i < argc; i++)
                    switch (spname(argv[i], buf)) {
                    case -1:    /* no match possible */
                        fp = efopen(argv[i], "r");
                        break;
                    case 1:     /* corrected */
                        fprintf(stderr, "\"%s\"? ", buf);
                        if (ttyin() == 'n')
                            break;
                        argv[i] = buf;
                        /* fall through... */
                    case 0: /* exact match */
                        fp = efopen(argv[i], "r");
                        print(fp, pagesize);
                        fclose(fp);
                    }
            exit(0);
        }

Spelling correction is not something to be blindly applied to every program that
uses filenames. It works well with p because p is interactive, but it's not
suitable for programs that might not be interactive.

Exercise 7-5. How much can you improve on the heuristic for selecting the best
match in spname? For example, it is foolish to treat a regular file as if it
were directory;
