
system has potential problems: open files in the caller, such as tty in the
routine ttyin in p, will be passed to the child process.

The lesson here is not that you should use our version of system for all your
programs --- it would break a non-interactive ed, for example --- but that you
should understand how processes are manged and use the primitives correctly; the
meaning of "correctly" varies with the application, and may not agree with the
standard implementation of system.


7.5 Signals and interrupts

This section is concerned with how to deal gracefully with signals (like
interrupts) from the outside world, and with program faults. Program faults
arise mainly from illegal memory references, execution of peculiar instructions,
or floating point errors. The most common outside-world signals are interrupt,
which is sent when the DEL character is typed; quit, generated by the FS
character (ctl-\); hangup, caused by hanging up the phone; and terminate,
generated by the kill command. When one of these events occurs, the signal is
sent to all processes that were started form the same terminal; unless other
arrangements have been made, the signal terminates the process. For most
signals, a core image file is written for potential debugging. (See adb(1) and
sdb(1).)

The system call signal alters the default action. It has two arguments. The
first is a number that specifies the signal. The second is either the address of
a function, or a code which requests that the signal be ignored or be given the
default action. The file <signal.h> contains definitions for the various
arguments. Thus

        #include <signal.h>
        ...
        signal(SIGINT, SIG_IGN);

causes interrupts to be ignored, while

        signal(SIGINT, SIG_DEL);

restores the default action of process termination. In all cases, signal returns
the previous value of the signal. If the second argument to signal is the name
of a function (which must have been declared already in the same source file),
the function will be called when the signal occurs. Most commonly this facility
is used to allow the program to clean up unfinished business before terminating,
for example to delete a temporary file:


