
There is still a subtle problem. Consider:

        $ sed 's/UNIX/UNIX(TM)g' precious | overwrite precious
        command garbled: s/UNIX/UNIX(TM)g
        $ ls -l precious
        -rw-rw-rw- 1 you           0 Oct  1 09:02 precious         #$%@*!
        $

If the program providing input to overwrite gets an error, its output will be
empty and overwrite will dutifully and reliably destroy the argument file.

A number of solutions are possible. Overwrite could ask for confirmation before
replacing a file, but making overwrite interactive would negate much of its
merit. overwrite could check that its input is non-empty (by test -z), but that
is ugly and not right, either: some output might be generated before an error is
detected.

The best solution is to run the data-generating program under overwrite's
control so its exit status can be checked. This is against tradition and
intuition --- in a pipeline, overwrite would normally go at the end. But to work
properly it must go first. overwrite produces nothing on its standard output,
however, so no generality is lost. And its syntax isn't unheard of: time, nice
and nohup are all commands that take another command as arguments.

Here is the safe version:

        # overwrite:  copy standard input to output after EOF
        # final version

        opath=$PATH
        PATH=/bin:/usr/bin

        case $# in
        0|1)    echo 'Usage: overwrite file cmd [args]' 1>&2; exit 2
        esac

        file=$1; shift
        new=/tmp/overwr1.$$; old=/tmp/overwr2.$$
        trap 'rm -f $new $old; exit 1' 1 2 15   # clean up files

        if PATH=$opath "$@" >$new               # collect input
        then
                cp $file $old   # save original file
                trap '' 1 2 15  # we are committed; ignore signals
                cp $new $file
        else
                echo "overwrite: $1 failed, $file unchanged" 1>&2
                exit 1
        fi
        rm -f $new $old

