
        $ echo ${var?}
        hello                              O.K., var is set
        $ echo ${junk}
        junk: parameter not set            Default message
        $ echo ${junk?error!}
        junk: error!                       Message provided
        $

Note that the message generated by the shell always contains the name of the
undefined variable.

Another form is ${var-thing} which evaluates to $var is it is define, and thing
if it is not. ${var=thing} is similar, but also sets $var to thing:

$ echo ${junk-'Hi there'}
Hi there
$ echo ${junk?}
junk: parameter not set                  junk unaffected
$ echo {junk='Hi there'}
Hi there
$ echo ${junk?}
Hi there                                 junk set to Hi there
$

The rules for evaluating variables are given in Table 5.3.

Returning to our original example,

        t=${1-60}

sets t to $1, or if no argument is provided, to 60.

+------------------------------------------------------------------------------+
|                   Table 5.3: Evaluation of Shell Variables                   |
|                                                                              |
| $var                  value of var; nothing if var undefined                 |
| ${var}                same; useful if alphanumerics follow variable name     |
| ${var-thing}          value of var if defined; otherwise thing.              |
|                          $var unchanged.                                     |
| ${var=thing}          value of var if defined; otherwise thing.              |
|                          if undefined, $var set to thing                     |
| ${var?message}        if defined, $var. Otherwise, print message             |
|                          and exit shell. If message empty, print:            |
|                                var: parameter not set                        |
| ${var+thing}          thing if $var defined, otherwise nothing               |
+------------------------------------------------------------------------------+

Exercise 5-9. Look at the implementation of true and false in /bin or
/usr/bin. (How would you find out where they are?)

Exercise 5-10. Change watchfor so that multiple arguments are treated as
different
