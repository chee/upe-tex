
people, rather than requiring the user to type 'joe|mary'.

Exercise 5-11. Write a version of watchwho that uses comm instead of awk to
compute the old and new data. Which version do you prefer?

Exercise 5-12. Write a version of watchwho that stores the who output in shell
variables instead of files. Which version do you prefer? Which version runs
faster? Should watchwho and checkmail do & automatically?

Exercise 5-13. What is the difference between the shell : do-nothing command and
the # command character? Are both needed?


5.4 Traps: catching interrupts

If you hit DEL or hang up the phone while watchwho is running, one or two
temporary files are left in /tmp, watchwho should remove the temporary files
before it exits. We need a way to detect when such events happen, and a way to
recover.

When you type DEL, an interrupt signal is sent to all the processes that you are
running on the terminal. Similarly, when you hang up, a hangup signal is
sent. There are other signals as well. Unless a program has taken explicit
action to deal with signals, the signal will terminate it. The shell protects
programs run with & form interrupts but not from hangups.

Chapter 7 discusses signals in detail, but you needn't know much to be able to
handle them in the shell. The shell built-in command trap sets up a sequence of
commands to be executed when a signal occurs:

        trap sequence-of-commands list of signal numbers

The sequence-of-commands is a single arguments, so it must almost always be
quoted. The signal number are small integers that identify the signal. For
example, 2 is the signal generated by pressing the DEL key, and 1 is generated
by hanging up the phone. The signal numbers most often useful to shell
programmers are listed in Table 5.4.

+------------------------------------------------------------------------------+
|			Table 5.4: Shell Signal Numbers                        |
|                                                                              |
| 0     shell exit (for any reason, including end of file)                     |
| 1     hangup                                                                 |
| 2     interrupt (DEL key)                                                    |
| 3     quit (ctl-\; causes program to produce core dump)                      |
| 9     kill (cannot be caught or ignored)                                     |
| 15    terminate, default signal generated by kill(1)                         |
+------------------------------------------------------------------------------+

So to clean up the temporary files in watchwho, a trap call should go just
before the loop, to catch hangup, interrupt and terminate:
