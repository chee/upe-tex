
In Chapter 1 we mentioned that your system might have a news command to report
messages of general interest to the user community. Although the name and
details of the command differ, most systems provide a news service. Our reason
for presenting a news command is not to replace your local command, but to show
how easily such a program can written in the shell. It might be interesting to
compare the implementation of our news command to your local version.

The basic idea of such programs is usually that individual news items are
stored, one per file, in a special directory like /usr/news. news (that is, our
news program) operates by comparing the modification times of the files in
/usr/news with that of a file in your home directory (.news_time) that serves as
a time stamp. For debugging, we can use '.' as the directory for both the news
files and .news_time; it can be changed to /usr/news when the program is ready
for general use.

        $ cat news
        # news:  print news files, version 1

        HOME=.          # debugging only
        cd .            # place holder for /usr/news
        for i in `ls -t * $HOME/.news_time`
        do
                case $i in
                */.news_time)   break ;;
                *)              echo news: $i
                esac
        done
        touch $HOME/.news_time
        $ touch .news-time
        $ touch x
        $ touch y
        $ news
        news: y
        news: x
        $

touch changes the last-modified time of its argument file to the present time,
without actually modifying the file. For debugging, we just echo the names of
the news files, rather than printing them. The loop terminates when it discovers
.news_time, thereby listing only those files that are newer. Note that the * in
case statements can match a /, which it cannot in filename patterns.

What happens if .news_time doesn't exist?

