
        $ cat hoc.y
        %{
        #define YYSTYPE double  /* data type of yacc stack */
        %}
        %token  NUMBER
        %left   '+' '-'   /* left associative, same precedence */
        %left   '*' '/'   /* left assoc., higher precedence */
        %%
        list:     /* nothing */
                | list '\n'
                | list expr '\n'    { printf("\t%.8g\n", $2); }
                ;
        expr:     NUMBER    { $$ = $1; }
                | expr '+' expr { $$ = $1 + $3; }
                | expr '-' expr { $$ = $1 - $3; }
                | expr '*' expr { $$ = $1 * $3; }
                | expr '/' expr { $$ = $1 / $3; }
                | '(' expr ')'  { $$ = $2; }
                ;
        %%
                /* end of grammar */
        ...

There's a lot of new information packed into these few lines. We are not going
to explain all of it, and certainly not how the parser works --- for that, you
will have to read the yacc manual.

Alternate rules are separated by '|'. Any grammar rule can have an associated
action, which will be performed when an instance of that rule is recognized in
the input. An action is a sequence of C statements enclosed in braces { and
}. Within an action, $n (that is, $1, $2, etc.) refers to the value returned by
the n-th component of the rule, and $$ is the value to be returned as the value
of the whole rule. So, for example, in the rule

        expr:     NUMBER    { $$ = $1; }

$1 is the value returned by recognizing NUMBER; that value is to be returned as
the value of the expr. The particular assignment $$ = $1 can be omitted --- $$
is always set to $1 unless you explicitly set it to something else.

At the next level, when the rule is

        expr:     expr '+' expr { $$ = $1 + $3; }

the value of the result expr is the sum of the values from the two component
expr's. Notice that '+' is $2; every component is numbered.

At the level above this, an expression followed by a newline ('\n') is
recognized as a list and its value printed. If the end of the input follows such
a construction, the parsing process terminates cleanly. A list can be an empty
string; this is how blank input lines are handled.

yacc input is free form; our format is the recommended standard.
