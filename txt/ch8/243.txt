
        $ cat hoc.y
        %{
        double  mem[26];        /* memory for variables 'a'..'z' */
        %}
        %union {                /* stack type */
                double  val;    /* actual value */
                int     index;  /* index into mem[] */
        }
        %token  <val>   NUMBER
        %token  <index> VAR
        %type   <val>   expr
        %right  '='
        %left   '+' '-'
        %left   '*' '/'
        %left   UNARYMINUS
        %%
        list:     /* nothing */
                | list '\n'
                | list expr '\n'    { printf("\t%.8g\n", $2); }
                | list error '\n'   { yyerrok; }
                ;
        expr:     NUMBER
                | VAR           { $$ = mem[$1]; }
                | VAR '=' expr  { $$ = mem[$1] = $3; }
                | expr '+' expr { $$ = $1 + $3; }
                | expr '-' expr { $$ = $1 - $3; }
                | expr '*' expr { $$ = $1 * $3; }
                | expr '/' expr {
                        if ($3 == 0.0)
                                execerror("division by zero", "");
                        $$ = $1 / $3; }
                | '(' expr ')'  { $$ = $2; }
                | '-' expr  %prec UNARYMINUS  { $$ = -$2; }
                ;
        %%
                /* end of grammar */
        ...

The %union declaration says that stack elements hold either a double (a number,
the usual case), or an int, which is an index into the array mem. The %token
declarations have been augmented with a type indicator. The %type declaration
specifies that expr is the <val> member of the union, i.e., a double. The type
information makes it possible for yacc to generate references to the correct
members of the union. Notice also that = is right-associative, while the other
operators are left-associative.

Error handling comes in several pieces. The obvious one is a test for a zero
divisor; if one occurs, an error routine execerror is called.

A second test is to catch the "floating point exception" signal that occurs
