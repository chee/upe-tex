
        $ cat makefile
        YFLAGS = -d             # force creation of y.tab.h
        OBJS = hoc.o init.o math.o symbol.o     # abbreviation

        hoc3:   $(OBJS)
                cc $(OBJS) -lm -o hoc3

        hoc.o:  hoc.h

        init.o symbol.o:        hoc.h y.tab.h

        pr:
                @pr hoc.y hoc.h init.c math.c symbol.c makefile

        clean:
                rm -f $(OBJS) y.tab.[ch]
        $

The YFLAGS . -d line adds the option -d to the yacc command line generated by
make; this tells yacc to produce the y.tab.h file of #define statements. The
OBJS... line defines a shorthand for a construct to be used several times
subsequently. The syntax is not the same as for shell variables --- the
parentheses are mandatory. The flag -lm causes the math library to be searched
for the mathematical functions.

hoc3 now depends on four .o files; some of the .o files depend on .h
files. Given these dependencies, make can deduce what recompilation is needed
after changes are made to any of the files involved. If you want to see what
make will do without actually running the processes, try

        $ make -n

On the other hand, if you want to force the file times into a consistent state,
the -t ("touch") option will update them without doing any compilation steps.

Notice that we have added not only a set of dependencies for the source files
but miscellaneous utility routines as well, all neatly encapsulated in one
place. By default, make makes the first thing listed in the makefile, but if you
name an item that labels a dependency rule, like symbol.o or pr, that will be
made instead. An empty dependency is taken to mean that the item is never "up to
date," so that action will always be done when requested. Thus

        $ make pr | lpr

produces the listing you asked for on a line printer. (The leading @ in "@pr"
suppresses the echo of the command being executed by make.) And

        $ make

removes the yacc output files and the .o files.

This mechanism of empty dependencies in the makefile is often
