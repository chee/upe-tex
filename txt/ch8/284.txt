listed; variables not so named are assumed to be global. The symbol table will also
have to be extended, so that a search is made first for locals, then for globals. How
does this interact with named arguments?

Exercise 8-20. How would you add arrays to hoc? how should they be passed to func-
tions and procedures? how are they returned?

Exercise 8-21. Generalize string handling, so that variables can hold strings instead of
numbers. What operators are needed? The hard part of this is storage management:
making sure that strings are stored in such a way that they are freed when they are not
needed, so that storage does not leak away. As an interim step, add better facilities for
output formatting, for example, access to some form of the C printf statement.


8.7 Performance evaluation

   We compared hoc to some of the other UNIX calculator programs, to get a
rough idea of how well it works. The table below should be taken with a grain
of salt, but it does indicate that our implementation is reasonable. All times
are in seconds of user time on a PDP-11/70. There are two tasks. The first is
computing Ackermann's function ack(3,3). This is a good test of the
function-call mechanism; it requires 2432 calls, some nested quite deeply.


The second test is computing the Fibonacci numbers with values less than 1000
a total of one hundred times; this involves mostly arithmetic with an occasional
function call.


   The four languages were hoc, bc(1), bas (an ancient BASIC dialect that
only runs on PDP-11), and C (using double's for variables).

   The numbers in Table 8.1 are the sum of the user and system CPU time as
