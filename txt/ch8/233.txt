
                         CHAPTER 8: PROGRAM DEVELOPMENT

The UNIX system was originally meant as a program development environment. In
this chapter we'll talk about some of the tools that are particularly suited for
developing programs. Our vehicle is a substantial program, an interpreter for a
programming language comparable in power to BASIC. We chose to implement a
language because it's representative of problems encountered in large
programs. Furthermore, many programs can profitably be viewed as languages that
convert a systematic input into a sequence of actions and outputs, so we want to
illustrate the language development tools.

In this chapter, we will cover specific lessons about

* yacc, a parser generator, a program that generates a parser from a grammatical
  description of a language;

* make, a program for specifying and controlling the processes by which a
  complicated program is compiled;

* lex, a program analogous to yacc, for making lexical analyzers.

We also want to convey some notions of how to go about such a project --- the
importance of starting with something small and letting it grow; language
evolution; and the use of tools.

We will describe the implementation of the language in six stages, each of which
would be useful even if the development went no further. These stages closely
parallel the way that we actually wrote the program.

(1) A four-function calculator, providing +, -, *, / and parentheses, that
    operates on floating point numbers. One expression is typed on each line;
    its value is printed immediately.

(2) Variables with names a through z. This version also has unary minus and some
    defenses against errors.

(3) Arbitrarily-long variable names, built-in functions for sin, exp, etc.,
    useful constants like PI (spelled PI because of typographic limitations),
    and an exponentiation operator.

(4) A change in internals: code is generated for each statement and subsequently
    interpreted, rather than being evaluated on the fly. No new features are
    added, but it leads to(5).

(5) Control flow: if-else and while, statement grouping with { and }, and
