
	hoc.y    - Grammar, main, yylex (as before)
	hoc.h    - Global data structure for inclusion
	symbol.c - Symbol table routines: lookup, install
	init.c   - Built-ins and constants; init
	math.c   - Interfaces to math routines: Sqrt, Log, etc.

This requires that we learn more about how to organize a multi-file C program,
and more about make so it can do some of the work for us.

We'll get back to make shortly. First, let us look at the symbol table code. A
symbol has a name, a type (it's either a VAR or a BLTIN), and a value. If the
symbol is a VAR, the value is a double; if the symbol is a built-in, the value
is a pointer to a function that returns a double. This information is needed in
hoc.y, symbol.c, and init.c. We could just make three copies, but it's too easy
to make a mistake or forget to update one copy when a change is made. Instead we
put the common information into a header file hoc.h that will be included by any
file that needs it. (The suffix .h is conventional but not enforced by any
program.) We will also add to the makefile the fact that these files depend on
hoc.h, so that when it changes, the necessary recompilations are done too.

	$ cat hoc.h
	typedef struct Symbol { /* symbol table entry */
		char    *name;
		short   type;   /* VAR, BLTIN, UNDEF */
		union {
			double  val;        /* if VAR */
			double  (*ptr)();   /* if BLTIN */
		} u;
		struct Symbol   *next;  /* to link to another */
	} Symbol;
	Symbol  *install(), *lookup();
	$

The type UNDEF is a VAR that has not yet been assigned a value.

The symbols are linked together in a list using the next field in Symbol. The
list itself is local to symbol.c; the only access to it is through the functions
lookup and install. This makes it easy to change to symbol table organization if
it becomes necessary. (We did that once.) lookup searches the list for a
particular name and returns a pointer to the Symbol with that name if found, and
zero otherwise. The symbol table uses linear search, which is entirely adequate
for our interactive calculator, since variables are looked up only during
parsing, not execution. install puts a variable with its associated type and
value at the head of the list. emalloc calls malloc, the standard storage
allocator (malloc(3)), and checks the result. These three routines are the
contents of symbol.c. The file y.tab.h is generated by running yacc -d; it
contains #define statements that yacc has generated for tokens like NUMBER, VAR,
BLTIN, etc.
