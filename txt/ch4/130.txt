
Exercise 4-12. Should calendar know about dates inside a line, not just at the
beginning? How about dates expressed in other formats, like 10/1/83?

Exercise 4-13. Why doesn't calendar use getname instead of $NAME?

Exercise 4-14. Write a personal version of rm that moves files to a temporary
directory rather than deleting them, with an at command to clean out the
directory while you are sleeping.


Loose ends

awk is an ungainly language, and it's impossible to show all its capabilities in
a chapter of reasonable size. here are some other things to look at in the
manual:

* Redirecting the output of print into files and pipes: any print or printf
  statement can be followed by > and a filename (as a quoted string or in a
  variable); the output will be sent to that file. As with the shell, >> appends
  instead of overwriting. Printing into a pipe uses | instead of >.

* Multi-line records: if the record separator RS is set to newline, then input
  records will be separated by an empty line. In this way, several input lines
  can be treated as a single record.

* "Pattern, pattern" as a selector: as in ed and sed, a range of lines can be
  specified by a pair of patterns. This matches lines from an occurrence of the
  first pattern until the next occurrence of the second. A simple example is

          NR == 10, NR == 20

  which matches lines 10 through 20 inclusive.


4.5 Good files and good filters

Although the last few awk examples are self-contained commands, many uses of awk
are simple one- or two-line programs to do some filtering as part of a larger
pipeline. This is true of most filters --- sometimes the problem at hand can be
solved by the application of a single filter, but more commonly it breaks down
into subproblems solvable by filters joined together into a pipeline. This use
of tools is often cited as the heart of the UNIX programming environment. That
view is overly restrictive; nevertheless, the use of filters pervades the
system, and it is worth observing why it works.

The output produced by UNIX programs is in a format understood as input by other
programs. Filterable files contain lines of text, free of decorative headers,
trailers or blank lines. Each line is an object of interest --- a filename, a
word, a description of a running process --- so programs like wc and grep can
count interesting items or search for them by name. When more information is
present for each object, the file is still line-by-line, but columnated into
fields separated by blanks or tabs, as in the output of ls -l. Given data
divided into such fields, programs like awk can easily select, process or
rearrange the information.

