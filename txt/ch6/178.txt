
putc(c,stdout). In fact, all four of these "functions" are defined as macros in
<stdio.h>, since they run faster by avoiding the overhead of a function call for
each character. See Table 6.3 for some other definitions in <stdio.h>.

With some of the preliminaries out of the way, we can now write the third
version of vis. If there are command-line arguments, they are processed in
order. If there are no arguments, the standard input is processed.

        /* vis:  make funny characters visible (version 3) */

        #include <stdio.h>
        #include <ctype.h>
        int strip = 0;      /* 1 => discard special characters */

        main(argc, argv)
            int argc;
            char *argv[];
        {
            int i;
            FILE *fp;

            while (argc > 1 && argv[1][0] == '-') {
                switch (argv[1][1]) {
                case 's':   /* -s: strip funny chars */
                    strip = 1;
                    break;
                default:
                    fprintf(stderr, "%s: unknown arg %s\n",
                        argv[0], argv[1]);
                    exit(1);
                }
                argc--;
                argv++;
            }
            if (argc == 1)
                vis(stdin);
            else
                for (i = 1; i < argc; i++)
                    if ((fp=fopen(argv[i], "r")) == NULL) {
                        fprintf(stderr, "%s: can't open %s\n",
                            argv[0], argv[i]);
                        exit(1);
                    } else {
                        vis(fp);
                        fclose(fp);
                    }
            exit(0);
        }

This code relies on the convention that optional arguments come first. After
