
        /* zap:  interactive process killer */

        #include <stdio.h>
        #include <signal.h>
        char    *progname;  /* program name for error message */
        char    *ps = "ps -ag"; /* system dependent */

        main(argc, argv)
            int argc;
            char *argv[];
        {
            FILE *fin, *popen();
            char buf[BUFSIZ];
            int pid;

            progname = argv[0];
            if ((fin = popen(ps, "r")) == NULL) {
                fprintf(stderr, "%s: can't run %s\n", progname, ps);
                exit(1);
            }
            fgets(buf, sizeof buf, fin);    /* get header line */
            fprintf(stderr, "%s", buf);
            while (fgets(buf, sizeof buf, fin) != NULL)
                if (argc == 1 || strindex(buf, argv[1]) >= 0) {
                    buf[strlen(buf)-1] = '\0'; /* suppress \n */
                    fprintf(stderr, "%s? ", buf);
                    if (ttyin() == 'y') {
                        sscanf(buf, "%d", &pid);
                        kill(pid, SIGKILL);
                    }
                }
            exit(0);
        }

We wrote the program to use ps -ag (the option is system dependent), but unless
you're the super-user you can kill only your own processes.

The first call to fgets picks up the header line from ps; it's an interesting
exercise to deduce what happens if you try to kill the "process" corresponding
to that header line.

The function sscanf is a memeber of the scanf(3) family for doing input format
conversion. It converts from a string instead of file. The system call kill
sends the specified signal to the process; signal SIGKILL, defined in
<signal.h>, can't be caught or ignored. You may remember from Chapter 5 that its
numeric value is 9, but it's better practice to use the symbolic constants from
header files than to sprinkle your programs with magic numbers.


If there are no arguments, zap presents each line of the ps output for possible
selection. If there is no argument, then zap offers only ps output lines than
match it. The function strindex(s1,s2) tests whether the argument
