
        $ pr ch1.1 ch1.2 ch1.3 ...

but you would soon get bored typing filenames and start to make mistakes. This
is where filename shorthand comes in. If you say

        $ pr ch*

the shell takes the * to mean "any string of character," so ch* is a pattern
that matches all filenames in the current directory that begin with ch. The
shell creates the list, in alphabetical+ order, and passes the list to pr. The
pr command never sees that *; the pattern match that the shell does in the
current directory generates a list of strings that are passed to pr.

The crucial point is that filename shorthand is not a property of the pr
command, but service of the shell. Thus you can use it to generate a sequence of
filenames for any command. For example, to count the words in the first chapter:

	$ wc ch1.*
	    113    562   3200 ch1.0
	    935   4081  22435 ch1.1
	    974   4191  22756 ch1.2
	    378   1561   8481 ch1.3

	   1293   5298  28841 ch1.4
	     33    194   1190 ch1.5
	     75    323   2030 ch1.6
	   3801  16210  88933 total
	$ 

There is a program called echo that is especially valuable for experimenting
with the meaning of the shorthand characters. As you might guess, echo does
nothing more than echo its arguments:

	$ echo hello world
	hello world
	$

But the arguments can be generated by pattern-matching:

    	$ echo ch1.*

lists the names of all the files in Chapter 1,

        $ echo *

lists all the filenames in the current directory in alphabetical order,

        $ pr *

prints all your files (in alphabetical order), and

----------------
+ Again, the order is not strictly alphabetical, in that upper case letters come
before lower case letters. See ascii(7) for the ordering of the characters used
in the sort.
